name: Build and Publish Demo APK
on:
  release:
    types: [ released ]
  push:
    paths:
      - 'app/**'
      - 'orbit-menu/**'
  workflow_dispatch:

jobs:
  build-demo-apk:
    name: Build and attach demo APK to release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4.2.2

      - name: Set up JDK 17
        uses: actions/setup-java@v4.6.0
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Cache Gradle and wrapper
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant Permission to Execute Gradle
        run: chmod +x gradlew

      - name: Build Release APK
        run: ./gradlew :app:assembleRelease

      - name: Get release tag or generate timestamp
        id: release_info
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "version_tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "version_tag=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          fi

      - name: Fetch Latest Release URL
        id: get_release_url
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_URL=$(curl -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r .upload_url)
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

      - name: Rename APK
        run: |
          mkdir -p release-artifacts
          cp app/build/outputs/apk/release/app-release-unsigned.apk release-artifacts/orbit-menu-demo-${{ steps.release_info.outputs.version_tag }}.apk

      - name: Upload APK to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_url.outputs.release_url }}
          asset_path: release-artifacts/orbit-menu-demo-${{ steps.release_info.outputs.version_tag }}.apk
          asset_name: orbit-menu-demo-${{ steps.release_info.outputs.version_tag }}.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload APK as workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: orbit-menu-demo-${{ steps.release_info.outputs.version_tag }}
          path: release-artifacts/orbit-menu-demo-*.apk
          retention-days: 5